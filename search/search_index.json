{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>If you find this guide helpful consider giving the  repo a \u2b50!</p>"},{"location":"#what-is-comfydock","title":"What is ComfyDock?","text":"<p>ComfyDock is a tool that allows you to easily manage your ComfyUI environments via Docker.</p>"},{"location":"#common-challenges-with-comfyui","title":"Common Challenges with ComfyUI","text":"<ul> <li>Custom Node Installation Issues: Installing new custom nodes can inadvertently change settings across the whole installation, potentially breaking the environment.</li> <li>Workflow Compatibility: Workflows are often tested with specific custom nodes and ComfyUI versions. Running these workflows on different setups can lead to errors and frustration.</li> <li>Security Risks: Installing custom nodes directly on your host machine increases the risk of malicious code execution.</li> </ul>"},{"location":"#how-comfydock-helps","title":"How ComfyDock Helps","text":"<ul> <li>Environment Duplication: Easily duplicate your current environment before installing custom nodes. If something breaks, revert to the original environment effortlessly.</li> <li>Deployment and Sharing: Workflow developers can commit their environments to a Docker image, which can be shared with others and run on cloud GPUs to ensure compatibility.</li> <li>Enhanced Security: Containers help to isolate the environment, reducing the risk of malicious code impacting your host machine.</li> </ul>"},{"location":"#youtube-guides","title":"YouTube Guides","text":"<ul> <li> <p>Intro and Installation: </p> </li> <li> <p>User Guide: </p> </li> </ul>"},{"location":"about_author/","title":"About the Author","text":"<p>Akatz AI:</p> <ul> <li>Website: https://akatz.ai</li> <li>Ko-fi</li> <li>Patreon</li> <li>Civitai</li> <li>YouTube</li> <li>Instagram</li> <li>TikTok</li> <li>X</li> <li>GitHub</li> </ul> <p>Contacts:</p> <ul> <li>Email: akatzfey@sendysoftware.com</li> </ul>"},{"location":"best_practices/","title":"Best Practices","text":""},{"location":"best_practices/#windows-and-wsl","title":"Windows and WSL","text":"<p>ComfyDock is designed to work seamlessly with WSL (Windows Subsystem for Linux). This allows you to run Dockerized ComfyUI environments with better performance than you\u2019d typically see when storing everything on a Windows drive. Below are some recommended steps and tips for setting up WSL, configuring it, and saving your models in WSL to reduce loading times.</p>"},{"location":"best_practices/#setting-up-wsl","title":"Setting up WSL","text":"<ol> <li> <p>Install WSL</p> <ul> <li> <p>On Windows 10/11, open PowerShell as Administrator and run:</p> <p><code>wsl --install -d Ubuntu</code></p> </li> <li> <p>Alternatively, open the Microsoft Store, search for \u201cUbuntu\u201d (or your preferred distro), and click Install.</p> </li> </ul> </li> <li> <p>Update WSL &amp; Packages</p> <ul> <li> <p>Once installed, open Ubuntu from the Start menu. Then run:</p> <p><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</code></p> </li> </ul> </li> <li> <p>Check Your WSL Version</p> <ul> <li> <p>Ensure you\u2019re using WSL2 for the best compatibility and performance:</p> <p><code>wsl --set-version &lt;distro-name&gt; 2</code> Replace  with the name of your distro (e.g. Ubuntu). <li> <p>Install Docker Desktop</p> <ul> <li>Install Docker Desktop for Windows, enable \u201cUse the WSL 2 based engine\u201d in the Docker settings, and integrate it with your Ubuntu distro.</li> </ul> </li>"},{"location":"best_practices/#configure-wsl-config","title":"Configure WSL Config","text":"<p>If you plan on running resource-heavy tasks (e.g., large model inference) in WSL, it\u2019s best to grant WSL more CPU cores and RAM. You can do this by creating or editing the .wslconfig file in your Windows home directory (%USERPROFILE%):</p> <pre><code>[wsl2]\nmemory=8GB       # Adjust as needed\nprocessors=4     # Number of CPU cores to allocate\n</code></pre> <ol> <li> <p>Locate Home Directory</p> <p>In File Explorer, go to <code>%USERPROFILE%</code>.</p> </li> <li> <p>Check if .wslconfig Exists</p> <ul> <li>If it doesn\u2019t, create a new text file named <code>.wslconfig</code>.</li> </ul> </li> <li> <p>Restart WSL</p> </li> </ol> <pre><code>wsl --shutdown\nwsl\n</code></pre> <ol> <li> <p>Verify Changes</p> <p>Inside WSL:</p> </li> </ol> <pre><code>htop\n# or\ncat /proc/meminfo\n</code></pre> <p>Confirm you see the updated RAM/CPU limits.</p>"},{"location":"best_practices/#saving-models-in-wsl","title":"Saving Models in WSL","text":"<ul> <li> <p>Performance Gains: Storing model checkpoints inside the WSL filesystem significantly reduces load times compared to storing them on a Windows (C:, D:, etc.) drive.</p> </li> <li> <p>Folder Paths: You might store your models at <code>/home/&lt;username&gt;/ComfyUI/models.</code></p> </li> <li> <p>Access WSL from Windows Explorer:</p> </li> </ul> <pre><code>\\\\wsl.localhost\\&lt;distro-name&gt;\\home\\&lt;username&gt;\\ComfyUI\\models\n</code></pre> <p>Replace <code>&lt;distro-name&gt;</code> with your actual distro name (e.g., Ubuntu).</p> <p>Why Do This?</p> <p>Reading large models from Windows drives can cause slowdowns due to file system translations. Keeping models in WSL\u2019s native file system lets Docker containers access them much faster.</p>"},{"location":"best_practices/#automatic-permission-handling","title":"Automatic Permission Handling","text":"<p>New in v1.1.0+: ComfyDock Docker images now include automatic permission checking and fixing tools.</p>"},{"location":"best_practices/#how-it-works","title":"How It Works","text":"<p>ComfyDock containers automatically check file permissions on startup to ensure the <code>comfy</code> user (UID 1000) can access all necessary files. This is especially helpful when:</p> <ul> <li>Using bind-mounted directories from your host system</li> <li>Sharing model directories between multiple users</li> <li>Working with files created by different users or processes</li> </ul>"},{"location":"best_practices/#default-behavior","title":"Default Behavior","text":"<p>By default, ComfyDock containers:</p> <ol> <li>Check permissions on all bind-mounted volumes and ComfyUI directories</li> <li>Display a summary of any permission issues found</li> <li>Suggest using the <code>fix-permissions</code> command if issues are detected</li> <li>Continue running even if permission issues exist</li> </ol>"},{"location":"best_practices/#quick-permission-fix","title":"Quick Permission Fix","text":"<p>If you encounter permission issues:</p> <pre><code># Access the running container\ncomfydock dev exec\n\n# Run the permission fix tool\nfix-permissions\n</code></pre> <p>The tool will:</p> <ul> <li>Show all files and directories with permission issues</li> <li>Ask for confirmation before making changes</li> <li>Create an audit log of all modifications</li> <li>Verify the fixes were successful</li> </ul>"},{"location":"best_practices/#customizing-permission-behavior","title":"Customizing Permission Behavior","text":"<p>You can control permission handling with environment variables:</p> <ul> <li><code>PERMISSION_CHECK_MODE=once</code> - Only check permissions on first startup</li> <li><code>PERMISSION_CHECK_MODE=never</code> - Disable automatic permission checking</li> <li><code>STRICT_PERMISSIONS=true</code> - Prevent container startup if permission issues exist</li> </ul> <p>For more details, see the Permission Handling documentation.</p>"},{"location":"best_practices/#editing-files-in-containers","title":"Editing Files in Containers","text":"<p>Sometimes you'll need to modify or update files that live inside your Dockerized ComfyUI environment. Since many files are not necessarily mounted to the Windows host filesystem, you may need to access them directly within the container.</p>"},{"location":"best_practices/#where-comfyui-is-stored","title":"Where ComfyUI is stored","text":"<ul> <li> <p>By default, when using ComfyDock, ComfyUI is installed to <code>/app/ComfyUI</code> inside the container.</p> </li> <li> <p>If you created a WSL-based environment, you might also have a copy under <code>/home/&lt;username&gt;/ComfyUI</code> or wherever you specified during environment creation.</p> </li> </ul>"},{"location":"best_practices/#how-to-edit-files","title":"How to Edit Files","text":"<ol> <li> <p>ComfyDock Dev Exec (Recommended)</p> <p>The easiest way to access a running container is using the ComfyDock CLI:</p> <p><code>bash comfydock dev exec</code></p> <p>This will list all running containers and let you select which one to access. You'll enter as the root user.</p> <p>\u26a0\ufe0f Important: Files created or modified as root may become inaccessible to the container's <code>comfy</code> user. Always fix permissions after making changes:</p> <p>```bash</p> </li> <li> <p>Docker Desktop Exec</p> <ul> <li> <p>Go to Docker Desktop \u2192 find the container for your ComfyUI environment.</p> </li> <li> <p>Click the container \u2192 Exec tab \u2192 open a shell.</p> </li> <li> <p>You can now browse or edit files via command-line text editors like <code>nano</code> or <code>vim</code>.</p> </li> </ul> </li> <li> <p>VSCode Dev Containers</p> <ul> <li> <p>Install the \"Dev Containers\" extension in VSCode.</p> </li> <li> <p>Make sure your container is running, then press F1 (Command Palette) \u2192 \"Dev Containers: Attach to Running Container\".</p> </li> <li> <p>Select your container (not the <code>\u2026-frontend</code> one).</p> </li> <li> <p>Once attached, you can open a folder (<code>/app/ComfyUI</code>) in VSCode and edit files graphically.</p> </li> </ul> </li> </ol>"},{"location":"best_practices/#for-single-files","title":"For single files","text":"<p>chown comfy:comfy /path/to/file</p>"},{"location":"best_practices/#for-directories","title":"For directories","text":"<p>chown -R comfy:comfy /path/to/directory ```</p>"},{"location":"best_practices/#install-custom-nodes","title":"Install Custom Nodes","text":"<p>To install custom nodes inside the container:</p> <ol> <li> <p>Access the Container <code>comfydock dev exec     # Select your running container</code></p> </li> <li> <p>Navigate to Custom Nodes Directory <code>cd /app/ComfyUI/custom_nodes</code></p> </li> <li> <p>Clone the Node Repo</p> </li> </ol> <pre><code>git clone &lt;custom_node_repo&gt;\ncd &lt;custom_node_directory&gt;\nuv pip install -r requirements.txt\n</code></pre> <p>Replace <code>&lt;custom_node_repo&gt;</code> with the GitHub URL.</p> <ol> <li> <p>Fix Permissions (Important!)</p> <p>Since you cloned as root, fix the ownership:</p> <p><code>bash chown -R comfy:comfy /app/ComfyUI/custom_nodes/&lt;custom_node_directory&gt;</code></p> </li> <li> <p>(Optional) Reload ComfyUI</p> <ul> <li>If ComfyUI was running in the container and you have HotReloadHack installed, it may automatically pick up the new custom node. Otherwise, restart ComfyUI.</li> </ul> </li> </ol>"},{"location":"best_practices/#developing-in-containers","title":"Developing in Containers","text":"<ol> <li> <p>Attach with VSCode</p> <ul> <li>This is the most convenient method for quickly editing and testing.</li> </ul> </li> <li> <p>HotReloadHack</p> <ul> <li>For faster iteration when writing or debugging custom nodes, consider installing the HotReloadHack. This lets ComfyUI detect changes without a full restart.</li> </ul> </li> <li> <p>Environment Duplication</p> <ul> <li>Before trying out new or experimental custom nodes, clone your environment via ComfyDock. If things break, you still have your original environment untouched.</li> </ul> </li> <li> <p>Permission Management</p> <ul> <li>With v1.1.0+ images, use the built-in fix-permissions command if you encounter issues after editing files as root. For detailed instructions on editing files in containers, see the Edit Files in Container documentation.</li> </ul> </li> </ol>"},{"location":"best_practices/#additional-recommendations","title":"Additional Recommendations","text":"<ul> <li> <p>Keep WSL &amp; Docker Updated: Out-of-date packages can lead to weird issues or mounting troubles.</p> </li> <li> <p>Watch Out for Permissions: If you see \u201cPermission denied\u201d errors, make sure you own the files inside WSL by running:</p> </li> </ul> <pre><code>sudo chown -R $USER:$USER /path/to/folder\nchmod -R u+w /path/to/folder\n</code></pre> <ul> <li> <p>Default+ Mode Issues: If the \u201cDefault+\u201d environment creation mode fails to install certain custom nodes, consider creating a plain \u201cDefault\u201d environment, installing your nodes one by one, then cloning that environment in the future.</p> </li> <li> <p>Sage-Attention Support: ComfyDock images v1.1.1+ include build-essential packages, ensuring packages like sage-attention that require compilation will work properly. Add the <code>--use-sage-attention</code> command on environment creation to use sage attention.</p> </li> </ul>"},{"location":"environments/","title":"Working with Environments","text":""},{"location":"environments/#environment-cards","title":"Environment Cards","text":"<p>Each environment is displayed as a card, showing:</p> <ul> <li>Name</li> <li>Base image</li> <li>Status (e.g., Created, Running, Exited)</li> </ul>"},{"location":"environments/#actions","title":"Actions","text":"<ul> <li>Settings: Edit environment details.</li> <li>Logs: View the current state of the environment.</li> <li>Duplicate: Clone an existing environment.</li> <li>Delete: Permanently remove an environment.</li> <li>Activate: Start the environment (deactivates others unless multiple containers are allowed).</li> </ul>"},{"location":"environments/#activating-environments","title":"Activating Environments","text":"<ul> <li> <p>Activate: Click the Activate button to run the environment.</p> <ul> <li>You will know an environment is active if it has a green Running status, and spinning fan icon.</li> </ul> <p></p> <ul> <li>Access the server by clicking the link next to the Status indicator.</li> <li>Once an environment is running you will be able to monitor the internal ComfyUI logs by clicking on the \u201cLogs\u201d button, which open a dialog displaying the current state:</li> </ul> <p></p> </li> </ul>"},{"location":"environments/#duplicating-an-environment","title":"Duplicating an Environment","text":"<p>Demo </p> <p>You can use the duplicate functionality to create a copy of an environment. Mounted directories are not included in this copy, only installed dependencies, copied data, and files already present in the environment will be saved to the duplicate.</p> <ul> <li> <p>Duplicate: Use the Duplicate button to create a copy of an environment. Adjust settings as needed during duplication.</p> <p></p> </li> <li> <p>Environment type by default is set to \u201cAuto\u201d, which keeps the same mount config as the original:</p> <p></p> </li> <li> <p>You can further adjust the duplicate environment in the Advanced Options tab, these options are the same as when creating a new environment.</p> </li> </ul> <p>IMPORTANT: you can only duplicate an environment that has been activated at least once. </p>"},{"location":"environments/#deleting-an-environment","title":"Deleting an Environment","text":"<ul> <li>Use the Delete button to remove an environment.</li> <li>If the environment is NOT already in the \u201cRecently Deleted\u201d folder, it will be moved there. If it already is in the \u201cRecently Deleted\u201d folder, it will be permanently deleted.</li> </ul> <p>NOTE: Files and directories that are \u201cmounted\u201d from the host machine (such as models, workflows, etc.) will NOT be deleted when an environment is deleted. Only files native to the container or copied into the container will be deleted.</p>"},{"location":"environments/#environment-settings","title":"Environment Settings","text":"<p>Click on Settings in the environment card to:</p> <ul> <li>Rename the environment.</li> <li>Change the environment\u2019s folder location.</li> <li>View detailed environment information (e.g., base image, mount points).</li> </ul> <p></p>"},{"location":"environments/#organizing-environments-with-folders","title":"Organizing Environments with Folders","text":"<p>You can use folders to organize your environments. You can see which folder you are currently viewing via the dropdown in the top-left corner:</p> <p></p>"},{"location":"environments/#default-folders","title":"Default Folders","text":"<ul> <li>All Environments:<ul> <li>A default folder that will display all environments you currently have saved, regardless of which folders they are saved under.</li> </ul> </li> <li>Recently Deleted:<ul> <li>A folder which shows environments that were recently removed. If you delete an environment from this folder it will be permanently deleted from the machine.</li> <li>Up to 10 (limit configurable in Settings) environments can remain in this folder at a time. If an environment is deleted and added to \u201cRecently Deleted\u201d when it is already at max capacity, the oldest created environment in the folder will be permanently deleted.</li> </ul> </li> </ul>"},{"location":"environments/#creating-new-folders","title":"Creating New Folders","text":"<ul> <li>You can create new folders by clicking on the \u201cAdd Folder\u201d button next to the folder dropdown menu:</li> </ul> <ul> <li>Folder names must be unique</li> <li>Folders will be added to the dropdown list in the order they were created</li> </ul>"},{"location":"environments/#editing-and-deleting-folders","title":"Editing and Deleting Folders","text":"<ul> <li>You can change a folder\u2019s name, or delete an empty folder by clicking on the \u201cSettings\u201d button right of a folder name in the dropdown menu.</li> </ul> <ul> <li>Click \u201cUpdate\u201d once you\u2019ve made changes to save them.</li> <li>Click \u201cDelete Folder\u201d if you\u2019d like to delete a folder, folders can only be deleted if they contain no environments (you can move or delete existing environments until the folder is empty).</li> </ul>"},{"location":"environments/#adding-environments-to-folders","title":"Adding Environments to Folders","text":"<p>There are a couple of ways to add an environment to a folder:</p> <ol> <li>Create the environment inside of a specific folder<ol> <li>Environments created with a folder selected will be added to that folder by default</li> <li>Environments created in a Default Folder (All Environments, Recently Deleted) will have the \u201cNone\u201d folder assigned by default.</li> </ol> </li> <li>Duplicate an environment inside of a specific folder:<ol> <li>Duplicates will be added to the selected folder by default</li> <li>Duplicates in a Default Folder will have the \u201cNone\u201d folder assigned.</li> </ol> </li> <li>Manually set the environment\u2019s folder via Environment Settings:  <ol> <li>You can manually specify which folder an environment should belong in with the Folder dropdown in settings. Click \u201cUpdate\u201d once selected to save the changes.</li> </ol> </li> </ol>"},{"location":"installation/","title":"Installation","text":"<p>ComfyDock can be installed in two different ways: directly using the CLI tool or through the Pinokio app platform. Choose the method that works best for your workflow.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Windows, Linux, or macOS machine (macOS is CPU-only)</li> <li>Docker: ComfyDock requires Docker to be installed on your system<ul> <li>For desktop environments: Docker Desktop  for Windows, macOS, or Linux</li> <li>For headless environments: Docker Engine + NVIDIA Container Toolkit</li> </ul> </li> <li>Latest WSL (Windows only).</li> <li>Latest NVIDIA drivers.</li> <li>Adequate disk space.</li> </ul>"},{"location":"installation/#installing-docker-desktop","title":"Installing Docker Desktop","text":"<ol> <li>Download Docker Desktop. (AMD64 recommended)</li> <li>Follow installation instructions for your operating system.</li> <li> <p>(Optional step: Windows) Ensure WSL is updated:</p> <ul> <li>Open PowerShell as Administrator.</li> <li> <p>Run the following command:</p> <p><code>wsl --update</code></p> </li> <li> <p>Verify Docker installation by running:</p> <p><code>wsl docker --version</code></p> </li> </ul> <p>If successful, you'll see output like: <code>Docker version 27.3.1, build ce12230</code>.</p> </li> </ol>"},{"location":"installation/#method-1-cli-installation","title":"Method 1: CLI Installation","text":"<p>Check out the GitHub repository for the latest updates and issues!</p>"},{"location":"installation/#option-a-install-with-uv-recommended","title":"Option A: Install with UV (Recommended)","text":"<p>UV is a fast Python package manager that makes installation simple and reliable.</p>"},{"location":"installation/#step-1-install-uv","title":"Step 1: Install UV","text":"<p>For detailed installation instructions, visit the UV documentation.</p> <p>Linux/macOS (including WSL):</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Windows:</p> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"installation/#step-2-install-comfydock","title":"Step 2: Install ComfyDock","text":"<p>As a global tool (recommended):</p> <pre><code>uv tool install comfydock\n</code></pre> <p>For temporary testing:</p> <pre><code>uvx comfydock --help\n# Or run commands directly:\nuvx comfydock up\n</code></pre> <p>For the latest version:</p> <pre><code>uvx comfydock@latest up\n</code></pre>"},{"location":"installation/#step-3-configure-and-run","title":"Step 3: Configure and Run","text":"<pre><code># Configure ComfyDock (optional)\ncomfydock config\n\n# Start ComfyDock\ncomfydock up\n</code></pre>"},{"location":"installation/#updating-comfydock-with-uv","title":"Updating ComfyDock with UV","text":"<pre><code>uv tool install --upgrade comfydock\n</code></pre>"},{"location":"installation/#option-b-install-with-pip","title":"Option B: Install with pip","text":"<p>If you prefer using pip or don't want to install UV:</p> <pre><code>pip install comfydock\n</code></pre> <p>Note: Requires Python 3.12 or higher.</p>"},{"location":"installation/#updating-comfydock-cli-with-pip","title":"Updating ComfyDock CLI with pip","text":"<pre><code>pip install --upgrade comfydock\n</code></pre>"},{"location":"installation/#cli-quick-start","title":"CLI Quick Start","text":""},{"location":"installation/#step-1-configure-comfydock","title":"Step 1: Configure ComfyDock","text":"<pre><code># Set your local ComfyUI path (if you have one)\ncomfydock config comfyui_path /path/to/your/ComfyUI\n\n# Or use interactive configuration mode\ncomfydock config\n</code></pre>"},{"location":"installation/#step-2-start-comfydock","title":"Step 2: Start ComfyDock","text":"<pre><code>comfydock up\n</code></pre> <p>This will start both the backend and frontend servers and open ComfyDock in your browser automatically.</p>"},{"location":"installation/#step-3-stop-comfydock","title":"Step 3: Stop ComfyDock","text":"<pre><code>comfydock down\n\nor\n\nctrl + c in the terminal\n</code></pre>"},{"location":"installation/#additional-commands","title":"Additional Commands","text":"<pre><code># Show main help\ncomfydock --help\n\n# Show help for a specific command\ncomfydock up --help\n\n# List all current configuration values\ncomfydock config --list\n\n# Start only the backend server without the frontend\ncomfydock up --backend\n\n# Access running comfydock container environment via shell\ncomfydock dev exec\n</code></pre>"},{"location":"installation/#method-2-pinokio-installation","title":"Method 2: Pinokio Installation","text":""},{"location":"installation/#step-1-install-the-pinokio-app","title":"Step 1: Install the Pinokio App","text":"<ol> <li>Download Pinokio</li> <li>Follow the installation instructions provided on the website.</li> <li>After installation:<ul> <li>Open Pinokio and click Discover (top-right corner).</li> <li>Select Download from URL.</li> <li>Enter the following URL into the first field:<code>https://github.com/ComfyDock/ComfyDock-Pinokio</code>Leave the second field blank.</li> <li>Click One-Click Install with Pinokio.</li> <li>Go through the standard installation process.</li> <li>You will be prompted to download Docker Desktop (see instructions above for installing docker), if docker is already installed you can continue.</li> <li>Finally, click Install and set an appropriate name to save the application.</li> </ul> </li> </ol>"},{"location":"installation/#step-2-install-comfydock_1","title":"Step 2: Install ComfyDock","text":"<ol> <li>Ensure Pinokio is running.</li> <li>Click the ComfyDock app on the home screen.<ul> <li>You should see the following menu:</li> <li></li> </ul> </li> <li>Click Install &amp; Update to begin setup.</li> <li>Make sure Docker Desktop is running and click Start.</li> <li>Look for <code>Uvicorn running on http://0.0.0.0:5172</code>.</li> <li>Click Show Environments to view the main interface.</li> <li>If empty, wait a bit and click refresh.</li> </ol>"},{"location":"sharing_images/","title":"Environment Sharing Using DockerHub","text":"<p>Sharing your ComfyUI environment via a container registry like DockerHub makes it easy for others to download and use your environment exactly as you configured it. Here\u2019s how to do it step by step:</p>"},{"location":"sharing_images/#step-1-prepare-the-environment","title":"Step 1: Prepare the Environment","text":"<ol> <li>Create or Duplicate an Environment:<ul> <li>Use the ComfyUI Environment Manager to create a new environment or duplicate an existing one that you want to share or back up.</li> </ul> </li> <li> <p>Install or Modify Files:</p> <ul> <li>Add custom nodes, models, or workflows via the Comfy Manager.</li> <li>For more advanced edits, attach to the running container using VSCode (see the earlier guide) and make changes directly inside the container.</li> </ul> <p>Important: Only files inside the container are saved when creating an image. Files from mounted directories (e.g., your <code>models</code> folder on your host machine) will not be included in the image. If needed, copy these files into the container.</p> </li> </ol>"},{"location":"sharing_images/#step-2-create-a-dockerhub-repository","title":"Step 2: Create a DockerHub Repository","text":"<ol> <li>Log in to DockerHub at hub.docker.com</li> <li>Navigate to your \u201cRepositories\u201d page.</li> <li>Click on Create a repository.</li> <li>Name your repository (e.g., <code>comfy-env-test</code>) and set its visibility (public or private).</li> <li>Use this name in the following tagging step.</li> </ol>"},{"location":"sharing_images/#step-3-duplicate-and-tag-the-environment","title":"Step 3: Duplicate and Tag the Environment","text":"<ol> <li>Duplicate the Environment:<ul> <li>Once the environment is ready, duplicate it to generate a new image. The image will be named something like <code>comfy-env-clone:&lt;environment-name&gt;</code>.</li> </ul> </li> <li> <p>Locate the Image:</p> <ul> <li> <p>Open Docker Desktop or use the following command to list available images:</p> <p><code>docker images</code></p> </li> <li> <p>Find the <code>comfy-env-clone:&lt;environment-name&gt;</code> image in the list.</p> </li> </ul> </li> <li> <p>Tag the Image for DockerHub:</p> <ul> <li> <p>Use the <code>docker tag</code> command to tag the image with your DockerHub repository name:</p> <p><code>docker tag comfy-env-clone:&lt;environment-name&gt; &lt;dockerhub-username&gt;/&lt;repo-name&gt;:&lt;tag&gt;</code></p> <p>Example:</p> <p><code>docker tag comfy-env-clone:my-environment akatzai/comfy-env-test:latest</code></p> </li> </ul> </li> </ol>"},{"location":"sharing_images/#step-4-push-the-image-to-dockerhub","title":"Step 4: Push the Image to DockerHub","text":"<ol> <li> <p>Log in to DockerHub:</p> <ul> <li> <p>Run the following command and enter your credentials:</p> <p><code>docker login</code></p> </li> </ul> </li> <li> <p>Push the Image:</p> <ul> <li> <p>Upload the tagged image to your DockerHub repository:</p> <p><code>docker push &lt;dockerhub-username&gt;/&lt;repo-name&gt;:&lt;tag&gt;</code></p> <p>Example:</p> <p><code>docker push akatzai/comfy-env-test:latest</code></p> </li> </ul> </li> <li> <p>Share the Repository URL:</p> <ul> <li>Once the push is complete, share the repository URL (e.g., <code>akatzai/comfy-env-test:latest</code>) with others. They can now download and run the image on their machine.</li> </ul> </li> </ol>"},{"location":"sharing_images/#step-5-running-the-shared-environment","title":"Step 5: Running the Shared Environment","text":"<ol> <li> <p>Download the Image:</p> <ul> <li> <p>Users can download the image directly from their Environment Manager interface via the Create Environment dialog:</p> <p></p> </li> <li> <p>Users can also pull the image using the following command:</p> <p><code>docker pull &lt;dockerhub-username&gt;/&lt;repo-name&gt;:&lt;tag&gt;</code></p> <p>Example:</p> <p><code>docker pull akatzai/comfy-env-test:latest</code></p> </li> </ul> </li> <li> <p>Run the Environment:</p> <ul> <li>If pulled via the Create Environment interface, activate the new environment and run as normal.</li> <li> <p>Start the container with appropriate mount settings for models, outputs, and other directories:</p> <p><code>docker run -it --rm -v /path/to/models:/app/models -v /path/to/output:/app/output &lt;dockerhub-username&gt;/&lt;repo-name&gt;:&lt;tag&gt;</code></p> </li> </ul> </li> </ol>"},{"location":"sharing_images/#important-notes","title":"Important Notes:","text":"<ul> <li>Mounted Directories: Ensure you know which directories to mount (e.g., <code>models</code>, <code>input</code>, <code>output</code>) for the environment to function properly.</li> <li>Immutable Environment: The container image is immutable, meaning you cannot change files inside it permanently unless you create a duplicate image.</li> </ul>"},{"location":"usage/","title":"Usage Overview","text":"<p>Video Demo </p>"},{"location":"usage/#manager-layout","title":"Manager Layout","text":"<p>ComfyDock has two main sections:</p> <ol> <li>Settings Panel (top)</li> <li>Environments Grid (below)</li> </ol> <p></p>"},{"location":"usage/#updating-user-settings","title":"Updating User Settings","text":"<ol> <li>Open Settings tab. </li> <li>Configure Defaults:<ul> <li>ComfyUI Path</li> <li>Port</li> <li>Runtime</li> <li>Start command</li> </ul> </li> <li>Click Save.</li> </ol>"},{"location":"usage/#creating-a-new-environment","title":"Creating a New Environment","text":"<p>Demo Video </p> <ol> <li>Click Create Environment. </li> <li>Fill out fields:<ul> <li>Name: Any text (emojis allowed).</li> <li>Docker Image: Pick a ComfyUI base image from Docker Hub, an image installed locally, or a custom image url using the dialog.<ul> <li>See the Docker Images section below for more details.</li> </ul> </li> <li>Path to ComfyUI: A valid directory on your host machine.<ul> <li>This can be any valid path to a directory on your host machine that you have write and read permissions to:</li> <li>e.g. \u201cC:\\Users\\akatz\\my\\path\\to\\ComfyUI\u201d</li> <li>If you don\u2019t have ComfyUI already installed at the provided location, you will be prompted to install it after hitting \u201ccreate\u201d</li> <li>If you provide a path to a directory containing multiple \u201cComfyUI\u201d folders, the code will select the first directory to use with the environment.</li> </ul> </li> </ul> </li> <li>Select an Environment Type (Default, etc.). <ul> <li>If default is selected, the environment will attempt to \u201cmount\u201d the models, output, and input directories from your existing ComfyUI installation into the environment.</li> <li>Mounted directories can be read and written to by the environment, anything not mounted from the host machine will not be accessible by the environment.</li> <li>You can see how changing the Environment Type directly affects the Mount Config by expanding the Advanced Settings tab.</li> </ul> </li> <li>Click Create. <p>Note: If you have not yet downloaded the selected ComfyUI release image, then you will be prompted to download it on create.</p> </li> </ol>"},{"location":"usage/#docker-images","title":"Docker Images","text":""},{"location":"usage/#browsing-docker-hub-images","title":"Browsing Docker Hub Images","text":"<p>When you first open the Docker Image dialog, you will be presented with a list of image tags available on Docker Hub. These images are custom ComfyUI base images that I have created for this tool. You can see the dockerfile and workflow used to build these images here. See the list of available images on dockerhub. The tag format is as follows:</p> <pre><code>&lt;comfyui-release&gt;-py&lt;python-version&gt;-cu&lt;cuda-version&gt;-pt&lt;pytorch-version&gt;\n</code></pre> <p>You can choose options in the separate dropdowns to filter the images by ComfyUI release, Python version, and CUDA version. You can also search for a specific image by name. Images that you have already downloaded will be shown in the list with a green \"Installed\" badge.</p> <p>Note: If you have not yet downloaded the selected image, then you will be prompted to download it on create.</p>"},{"location":"usage/#using-local-images","title":"Using Local Images","text":"<p>If you have a local image already downloaded, you can select it by tag in the \u201cInstalled\u201d tab. This list will show all images you currently have available on your machine.</p>"},{"location":"usage/#using-custom-images","title":"Using Custom Images","text":"<p>If you have a custom image you want to use, you can specify it by tag in the \u201cCustom\" tab. This input expects a full Docker Hub image tag string: e.g. <code>akatzai/comfydock-env:v2.6.0-py3.12-cu12.1-ptstable</code>.</p> <p>Note: Currently only custom images from Docker Hub are supported.</p>"},{"location":"usage/#mount-config","title":"Mount Config","text":"<p>The Mount Config panel now provides granular control over how host directories interact with container paths, with four configurable columns per row:</p> <p></p>"},{"location":"usage/#columns-explained","title":"Columns Explained","text":"<ol> <li>Override (Checkbox):<ul> <li>Checked:\u00a0Manually specify the exact host path. Useful for non-standard directory locations.</li> <li>Unchecked:\u00a0Automatically generates host path by combining your ComfyUI path with the selected container directory name (e.g., if ComfyUI path is\u00a0<code>C:\\ComfyUI</code>\u00a0and container path is\u00a0<code>models</code>, host path becomes\u00a0<code>C:\\ComfyUI\\models</code>).</li> </ul> </li> <li>Host Path:<ul> <li>The physical directory on your machine that will be connected to the container.</li> <li>Editable directly when Override is checked.</li> <li>Grayed out and auto-generated when Override is unchecked.</li> </ul> </li> <li>Container Path (Dropdown):<ul> <li>Predefined container locations you can map to:<ul> <li><code>/app/ComfyUI/models</code></li> <li><code>/app/ComfyUI/output</code></li> <li><code>/app/ComfyUI/input</code></li> <li><code>/app/ComfyUI/custom_nodes</code></li> <li><code>/app/ComfyUI/user</code></li> </ul> </li> </ul> </li> <li>Mount Action:<ul> <li>Mount:\u00a0Creates live sync between host and container directories (changes reflect immediately in both)</li> <li>Copy:\u00a0Creates a one-time snapshot copy from host to container at environment creation</li> </ul> </li> </ol>"},{"location":"usage/#key-behaviors","title":"Key Behaviors","text":"<ul> <li>Changing any Mount Config setting automatically switches Environment Type to \"Custom\"</li> <li>Add new mappings with\u00a0Add Directory\u00a0button</li> <li>Delete mappings using the \u274c icon on each row</li> <li>Container paths must be absolute paths starting with\u00a0<code>/</code></li> <li>Host paths follow OS conventions (Windows:\u00a0<code>C:\\path</code>, Linux/macOS:\u00a0<code>/path</code>)</li> </ul>"},{"location":"usage/#mounting-vs-copying-updated","title":"Mounting vs. Copying (Updated)","text":"<p>When to Use Mount:</p> <ul> <li>Frequently updated resources (models, input/output folders)</li> <li>Shared assets between environments</li> <li>Development/testing scenarios needing real-time changes</li> </ul> <p>When to Use Copy:</p> <ul> <li>Creating immutable snapshots for reproducibility</li> <li>Archiving specific workflow versions</li> <li>Sharing environments with bundled dependencies</li> <li>Sensitive data that shouldn't persist in host directories</li> </ul>"},{"location":"usage/#important-notes","title":"Important Notes:","text":"<ul> <li>Copied directories become container-only - changes in host won't affect them</li> <li>Mounted custom_nodes directories trigger automatic dependency installation</li> <li>Read-only mounts (available via advanced settings) prevent accidental container modifications</li> </ul>"},{"location":"usage/#advanced-options","title":"Advanced Options","text":"<ul> <li>Runtime: <code>NVIDIA</code> for GPU or <code>None</code> for CPU.</li> <li>Command: Extra flags for the ComfyUI startup command, e.g. <code>--fast</code> or <code>--lowvram</code>.</li> <li>Port: The web UI port.</li> </ul>"},{"location":"troubleshooting/add_more_ram_to_wsl/","title":"How to Grant WSL More RAM or Processors by Editing <code>.wslconfig</code>","text":"<p>If you're running resource-heavy tasks in WSL (Windows Subsystem for Linux) and want to improve performance by granting it more RAM or processors, follow these simple steps:</p>"},{"location":"troubleshooting/add_more_ram_to_wsl/#step-1-locate-your-home-directory","title":"Step 1: Locate Your Home Directory","text":"<ol> <li>Open File Explorer on your Windows computer.</li> <li> <p>In the address bar, type:</p> <p><code>%USERPROFILE%</code></p> </li> <li> <p>Press Enter to go to your home directory.</p> </li> </ol>"},{"location":"troubleshooting/add_more_ram_to_wsl/#step-2-create-or-edit-the-wslconfig-file","title":"Step 2: Create or Edit the <code>.wslconfig</code> File","text":"<ol> <li>Check if you already have a file named <code>.wslconfig</code> in your home directory.<ul> <li>If it exists, open it with a text editor like Notepad.</li> <li>If it doesn\u2019t exist:<ul> <li>Right-click and select New &gt; Text Document.</li> <li>Name the file <code>.wslconfig</code> (make sure it doesn\u2019t have <code>.txt</code> at the end).</li> </ul> </li> </ul> </li> </ol>"},{"location":"troubleshooting/add_more_ram_to_wsl/#step-3-add-resource-settings","title":"Step 3: Add Resource Settings","text":"<p>Add the following lines to configure WSL resources:</p> <pre><code>[wsl2]\nmemory=4GB        # Limits WSL to 4GB of RAM (adjust as needed)\nprocessors=4       # Grants WSL 4 CPU cores (adjust as needed)\n</code></pre> <ul> <li><code>memory=4GB</code>: Replace <code>4GB</code> with the amount of RAM you want to allocate (e.g., <code>8GB</code>, <code>64GB</code>).</li> <li><code>processors=4</code>: Replace <code>4</code> with the number of CPU cores you want to allocate (e.g., <code>2</code>, <code>6</code>).</li> </ul>"},{"location":"troubleshooting/add_more_ram_to_wsl/#step-4-save-the-file","title":"Step 4: Save the File","text":"<ul> <li>Save your changes and close the editor.</li> </ul>"},{"location":"troubleshooting/add_more_ram_to_wsl/#step-5-restart-wsl","title":"Step 5: Restart WSL","text":"<ol> <li>Open Command Prompt or PowerShell.</li> <li> <p>Restart WSL with the following command:</p> <p><code>wsl --shutdown</code></p> </li> <li> <p>Start your WSL distribution again by opening it or running:</p> <p><code>wsl</code></p> </li> </ol>"},{"location":"troubleshooting/add_more_ram_to_wsl/#step-6-verify-the-changes","title":"Step 6: Verify the Changes","text":"<ul> <li>Open your WSL terminal.</li> <li> <p>Run the following command to verify the allocated resources:or</p> <p><code>htop</code></p> <p><code>cat /proc/meminfo</code></p> </li> </ul> <p>You should see the updated memory and CPU limits applied to your WSL environment.</p> <p>That's it! You\u2019ve successfully updated WSL to use more RAM or processors, boosting its performance for resource-intensive tasks. \ud83c\udf89</p>"},{"location":"troubleshooting/edit_files_in_container/","title":"Edit Files in the Container","text":""},{"location":"troubleshooting/edit_files_in_container/#using-comfydock-dev-exec","title":"Using ComfyDock Dev Exec","text":"<p>New in ComfyDock CLI: The <code>comfydock dev exec</code> command provides a convenient way to access running containers.</p> <p>The easiest way to access a running container is using the ComfyDock CLI:</p> <pre><code>comfydock dev exec\n</code></pre> <p>This command will:</p> <ol> <li>List all running ComfyDock containers</li> <li>Let you select which container to access</li> <li>Open a shell session as the root user</li> </ol> <p>From inside the container you will have access to ComfyUI files at the default path /app/ComfyUI.</p>"},{"location":"troubleshooting/edit_files_in_container/#manually-installing-custom-nodes","title":"Manually installing custom nodes","text":"<p>You can run <code>cd custom_nodes/</code> and <code>git clone &lt;path to my custom node repo&gt;</code> to manually add new custom nodes (don't forget to fix the permissions after you clone with <code>chown -R comfy:comfy &lt;my custom node repo&gt;</code>! See below for details).</p>"},{"location":"troubleshooting/edit_files_in_container/#important-root-user-permissions","title":"\u26a0\ufe0f Important: Root User Permissions","text":"<p>When using <code>comfydock dev exec</code>, you enter the container as the root user. This gives you full access to modify any files, but it comes with an important caveat:</p> <p>Files created or modified as root may become inaccessible to the container's <code>comfy</code> user.</p> <p>This can cause issues because ComfyUI runs as the <code>comfy</code> user (UID 1000) for security reasons. If you create or edit files as root, they will be owned by root (UID 0) and the comfy user may not be able to read or write them.</p>"},{"location":"troubleshooting/edit_files_in_container/#best-practices-when-using-root-access","title":"Best Practices When Using Root Access","text":"<ol> <li> <p>Check file ownership after making changes: <code>ls -la /path/to/file</code></p> </li> <li> <p>Change ownership to comfy user if needed: <code>chown comfy:comfy /path/to/file</code></p> </li> <li> <p>For directories, use recursive ownership change: <code>chown -R comfy:comfy /path/to/directory</code></p> </li> <li> <p>Alternatively, switch to the comfy user after entering: <code>su comfy</code></p> </li> <li> <p>If you encounter permission issues later, use the fix-permissions tool: <code>fix-permissions</code></p> </li> </ol>"},{"location":"troubleshooting/edit_files_in_container/#alternative-methods-for-editing-files","title":"Alternative Methods for Editing Files","text":""},{"location":"troubleshooting/edit_files_in_container/#editing-files-inside-the-container-with-vscode","title":"Editing Files Inside the Container with VSCode","text":"<p>How to Do This Using VSCode:</p> <ol> <li> <p>Install the \u201cDev Containers\u201d Extension:</p> <p>In VSCode, open the Extensions panel and search for \u201cDev Containers\u201d. Install it.</p> </li> <li> <p>Attach to the Running Container:</p> <p>Make sure your environment\u2019s container is running. In VSCode, press F1 (or open the Command Palette) and type \u201cDev Containers: Attach to Running Container\u201d and select it from menu:</p> <p></p> <p>Select the container you want to work with: (DON\u2019T choose /comfy-env-frontend)</p> <p></p> </li> <li> <p>Open &amp; Edit Files:</p> <p>Once connected, VSCode will show the container\u2019s file system. Open the \u201cFile\u201d menu from the topbar and click \u201cOpen Folder\u201d:</p> <p></p> <p>Now you can navigate to the location of ComfyUI saved in the container by typing \u201c/app/ComfyUI/ in the provided field:</p> <p></p> <p>Click \u201cOK\u201d. Now in the left sidebar you should see the contents of your ComfyUI environment, and can browse folders, open files, and edit them just like you would locally. You can also drag and drop files from your machine directly into folders in the sidebar, which will upload them to the container. Any changes you make here will apply and be saved directly inside the container.</p> </li> <li> <p>Open a Terminal to access the running python environment:</p> <p>You can perform actions such as \u201cgit clone\u201d and \u201cuv pip install\u201d inside of the container environment by opening a new terminal window after connecting:</p> <p></p> <p>You should see this terminal open at the bottom of the VSCode window:</p> <p></p> <p>Now you can perform all your required installation actions just like you would on a local environment.</p> </li> </ol> <p>Why Do This?</p> <ul> <li>Perfect for tweaking custom nodes, environment configs, or any code that isn\u2019t easily accessible from your host machine.</li> <li>Great for development and troubleshooting without having to rebuild or re-mount anything.</li> </ul>"},{"location":"troubleshooting/filepath_permissions/","title":"Understanding Filepaths in WSL vs. Windows","text":"<p>When running Docker in WSL on Windows, you\u2019re essentially working across two file systems:</p> <ul> <li>Windows File System: Uses familiar drive letters like <code>C:\\</code> or <code>D:\\</code>. Files and folders saved here can be accessed from standard Windows applications and file explorers.</li> <li>WSL File System: Runs within the Linux environment. File paths look like <code>/home/user/...</code> or <code>/mnt/c/...</code> (for accessing Windows files from within WSL).</li> </ul> <p>Key Differences:</p> <ul> <li>WSL paths are case-sensitive (<code>/ComfyUI</code> is different from <code>/comfyui</code>).</li> <li>File access between Windows and WSL can sometimes be slower due to file system translation.</li> </ul>"},{"location":"troubleshooting/filepath_permissions/#how-to-find-wsl-filepaths-from-windows","title":"How to Find WSL Filepaths from Windows","text":"<p>You can access WSL files directly from Windows Explorer:</p> <ol> <li>Open File Explorer.</li> <li> <p>Enter the following path in the address bar:</p> <p><code>\\\\wsl.localhost\\&lt;distro-name&gt;\\&lt;path-to-directory&gt;</code></p> <p>Example: <code>\\\\wsl.localhost\\Ubuntu\\home\\akatz\\ComfyUI\\models</code></p> </li> <li> <p>Replace <code>&lt;distro-name&gt;</code> with the name of your installed WSL distribution (e.g., <code>Ubuntu</code> or <code>Debian</code>).</p> </li> <li>Navigate through the folders as needed.</li> </ol>"},{"location":"troubleshooting/filepath_permissions/#common-issues-and-fixes","title":"Common Issues and Fixes","text":""},{"location":"troubleshooting/filepath_permissions/#1-permission-denied-errors","title":"1. Permission Denied Errors","text":"<p>Problem: You see an error like <code>Permission denied</code> when trying to access or modify a file or folder inside the container or WSL.</p> <p>Solution:</p> <ol> <li> <p>Check Ownership and Permissions:</p> <ul> <li>Open a WSL terminal.</li> <li>Navigate to the problematic folder using <code>cd /path/to/folder</code>.</li> <li> <p>Run:</p> <p><code>ls -l</code></p> <p>This shows the owner and permissions of files in the directory.</p> </li> <li> <p>If the owner is not your user (e.g., <code>root</code>), change ownership with:</p> <p><code>sudo chown -R $USER:$USER /path/to/folder</code></p> </li> </ul> </li> <li> <p>Ensure Write Permissions:</p> <ul> <li> <p>To grant write access, run:</p> <p><code>chmod -R u+w /path/to/folder</code></p> </li> </ul> </li> </ol>"},{"location":"troubleshooting/filepath_permissions/#2-files-not-showing-up-in-containers","title":"2. Files Not Showing Up in Containers","text":"<p>Problem: Files or directories mounted from the host are missing inside the container.</p> <p>Solution:</p> <ul> <li>Check Mount Configurations: Ensure the directory you\u2019re trying to mount is correctly specified in the environment\u2019s mount settings.</li> <li>Verify File Paths: Ensure the specified path exists on your host machine and is accessible.</li> <li>Restart the Environment: Sometimes, restarting the Docker container resolves mounting issues.</li> </ul>"},{"location":"troubleshooting/filepath_permissions/#3-slow-file-access-or-model-loading","title":"3. Slow File Access or Model Loading","text":"<p>Problem: Files stored on your Windows file system load slowly in WSL or the container.</p> <p>Solution:</p> <ul> <li> <p>Move Files to WSL:</p> <ul> <li> <p>Copy the files to your WSL installation directory for faster access. For example:</p> <p><code>cp /mnt/c/Users/akatz/ComfyUI/models /home/akatz/ComfyUI/models</code></p> </li> <li> <p>Update your environment\u2019s settings to point to the new WSL location.</p> </li> <li>Use WSL\u2019s File Explorer Path: Use <code>\\\\wsl.localhost</code> as described above for direct access.</li> </ul> </li> </ul>"},{"location":"troubleshooting/filepath_permissions/#4-unable-to-locate-wsl-distro","title":"4. Unable to Locate WSL Distro","text":"<p>Problem: You can\u2019t find your WSL installation or files in File Explorer.</p> <p>Solution:</p> <ol> <li> <p>Open a terminal and list available WSL distros:</p> <p><code>wsl -l</code></p> <p>This will display a list of installed distros (e.g., <code>Ubuntu</code>, <code>Debian</code>).</p> </li> <li> <p>Ensure the distro is running:</p> <p><code>wsl -d &lt;distro-name&gt;</code></p> </li> <li> <p>Use the correct path in File Explorer:</p> <p><code>\\\\wsl.localhost\\&lt;distro-name&gt;\\&lt;path-to-directory&gt;</code></p> </li> </ol>"},{"location":"troubleshooting/filepath_permissions/#5-files-saved-in-wsl-are-missing-in-windows","title":"5. Files Saved in WSL Are Missing in Windows","text":"<p>Problem: You saved files in WSL, but they\u2019re not visible from Windows.</p> <p>Solution:</p> <ul> <li>Use Windows Explorer: Access the WSL directory using the <code>\\\\wsl.localhost</code> path.</li> <li>Copy Files to Windows:<ul> <li> <p>Use the <code>cp</code> command in WSL to copy files to a Windows-accessible directory:</p> <p><code>cp /home/akatz/ComfyUI/output /mnt/c/Users/akatz/Documents/ComfyUI_Output</code></p> </li> </ul> </li> </ul>"},{"location":"troubleshooting/filepath_permissions/#tips-for-avoiding-path-and-permissions-issues","title":"Tips for Avoiding Path and Permissions Issues","text":"<ol> <li>Use Consistent File Naming: Stick to lowercase letters and avoid spaces or special characters in filenames to prevent case sensitivity and parsing errors.</li> <li>Verify Mount Points: Double-check mount configurations when creating or updating environments to ensure the correct paths are specified.</li> <li>Run Commands as Your User: Avoid using <code>sudo</code> unless necessary, as it may cause files to be owned by <code>root</code>, leading to permission issues.</li> <li>Keep WSL Updated: Ensure WSL and Docker are up-to-date to minimize compatibility issues.</li> </ol>"},{"location":"troubleshooting/installing_custom_nodes_manually/","title":"Installing Custom Nodes Manually","text":""},{"location":"troubleshooting/installing_custom_nodes_manually/#installing-custom-nodes-manually","title":"Installing Custom Nodes Manually","text":"<ul> <li>You can manually install custom nodes using \u201cgit clone\u201d by using the \u201cexec\u201d feature of docker.</li> <li>Click the settings button on the environment you\u2019d like to install nodes in, and find the \u201ccontainer name\u201d in the About section.</li> <li> <p>In docker desktop find a running container with the matching container name.</p> <p></p> </li> <li> <p>After clicking on the container in docker desktop, navigate to the \u201cexec\u201d tab:</p> <p></p> </li> <li> <p>In the terminal you can run commands that will execute within the running container.</p> </li> <li>Navigate to custom nodes directory by inputting the command:</li> </ul> <pre><code>cd /app/ComfyUI/custom_nodes\n</code></pre> <ul> <li>Then run the following commands, replacing  with the URL of the github custom node repo you\u2019d like to install (e.g. https://github.com/akatz-ai/ComfyUI-AKatz-Nodes): <pre><code> git clone &lt;custom_node_repo&gt;\n cd &lt;custom_node_directory&gt;/\n pip install -r requirements.txt\n</code></pre>"},{"location":"troubleshooting/other/","title":"Other Issues","text":""},{"location":"troubleshooting/other/#default-mode-fails-to-install-all-custom-nodes","title":"Default+ Mode Fails To Install All Custom Nodes","text":"<ul> <li>Due to environmental and OS differences, using Default+ mode when creating a new ComfyUI environment may not always correctly install all custom nodes in an existing install location.</li> <li>My current recommendation is to instead try creating a new Default environment, load up the workflows that you normally use, and re-install missing custom nodes through the manager. Once you have a solid working environment, you can clone it whenever making updates or installing new nodes, and if this breaks things you can always delete &amp; clone another from the original environment.</li> </ul>"},{"location":"troubleshooting/other/#unknown-runtime-specified-nvidia","title":"Unknown runtime specified nvidia","text":"<ul> <li>docker: Error response from daemon: Unknown runtime specified nvidia.:<ul> <li>need to install nvidia-container-toolkit in linux:</li> <li>nvidia-container-toolkit install guide</li> </ul> </li> </ul>"},{"location":"troubleshooting/permission_handling/","title":"Permission Handling in Docker Containers","text":"<p>Note: These features are available in ComfyDock Docker images v1.1.0 and later.</p> <p>ComfyDock now includes automatic permission checking and fixing tools to help resolve common file access issues when using Docker containers.</p>"},{"location":"troubleshooting/permission_handling/#automatic-permission-checking","title":"Automatic Permission Checking","text":"<p>When a ComfyDock container starts, it automatically checks for permission issues on:</p> <ul> <li>Bind-mounted volumes</li> <li>ComfyUI directories (models, custom_nodes, input, output, etc.)</li> </ul> <p>The check runs as the <code>comfy</code> user (UID 1000 by default) to ensure all necessary files are accessible.</p>"},{"location":"troubleshooting/permission_handling/#permission-check-results","title":"Permission Check Results","text":"<p>After the check completes, you'll see one of these messages:</p> <ul> <li>\u2705 No permission issues found - Everything is accessible</li> <li>\u26a0\ufe0f Permission issues detected! - Some files/directories need fixing</li> </ul>"},{"location":"troubleshooting/permission_handling/#using-the-fix-permissions-tool","title":"Using the Fix-Permissions Tool","text":"<p>If permission issues are detected, you can use the built-in <code>fix-permissions</code> command:</p> <ol> <li> <p>Access the container: <code>comfydock dev exec     # Select running container from the list</code></p> </li> <li> <p>Run the fix command: <code>fix-permissions</code></p> </li> <li> <p>Review and confirm:</p> <ul> <li>The tool will show all affected files and directories</li> <li>Current ownership will be displayed</li> <li>You'll be asked to confirm before any changes are made</li> </ul> </li> </ol>"},{"location":"troubleshooting/permission_handling/#what-the-tool-does","title":"What the Tool Does","text":"<ul> <li>Changes ownership of problematic files to the <code>comfy</code> user (UID:GID 1000:1000)</li> <li>Creates an audit log of all changes</li> <li>Verifies the fixes were successful</li> <li>Only affects files with permission issues (not your entire filesystem)</li> </ul>"},{"location":"troubleshooting/permission_handling/#example-output","title":"Example Output","text":"<pre><code>=== ComfyDock Permission Fix Tool ===\nThis tool will fix permission issues for the comfy user (UID=1000, GID=1000)\n\n\u26a0\ufe0f  Permission issues found:\n   - Directories: 2\n   - Files: 15\n\nThe following items will have their ownership changed to comfy:comfy (1000:1000):\n\nDirectories:\n  \ud83d\udcc1 /app/ComfyUI/models/checkpoints (current: 501:501)\n  \ud83d\udcc1 /app/ComfyUI/custom_nodes/ComfyUI-Impact-Pack (current: 0:0)\n\nFiles:\n  \ud83d\udcc4 /app/ComfyUI/models/checkpoints/sd_xl_base.safetensors (current: 501:501)\n  ... and 14 more files\n\n\u26a0\ufe0f  WARNING: This will change ownership of the above files and directories!\nDo you want to proceed? (yes/no): yes\n</code></pre>"},{"location":"troubleshooting/permission_handling/#environment-variables","title":"Environment Variables","text":"<p>You can control permission handling behavior using these environment variables:</p>"},{"location":"troubleshooting/permission_handling/#permission_check_mode","title":"PERMISSION_CHECK_MODE","text":"<p>Controls when permission checks run:</p> <ul> <li><code>startup</code> - Check on every container start</li> <li><code>once</code>  (default) - Check only on first startup</li> <li><code>never</code> - Disable permission checking</li> </ul>"},{"location":"troubleshooting/permission_handling/#skip_ownership_fix","title":"SKIP_OWNERSHIP_FIX","text":"<ul> <li>Set to <code>true</code> to skip automatic ownership changes when remapping UID/GID</li> <li>Useful if you want to handle permissions manually</li> </ul>"},{"location":"troubleshooting/permission_handling/#strict_permissions","title":"STRICT_PERMISSIONS","text":"<ul> <li>Set to <code>true</code> to prevent container startup if permission issues are found</li> <li>Forces you to fix permissions before the container can run</li> </ul>"},{"location":"troubleshooting/permission_handling/#wanted_uid-wanted_gid","title":"WANTED_UID / WANTED_GID","text":"<ul> <li>Remap the comfy user to different UID/GID values</li> <li>Useful for matching your host user ID</li> <li>Example: <code>WANTED_UID=1001 WANTED_GID=1001</code></li> </ul>"},{"location":"troubleshooting/permission_handling/#common-permission-scenarios","title":"Common Permission Scenarios","text":""},{"location":"troubleshooting/permission_handling/#wsl-users","title":"WSL Users","text":"<p>The default UID/GID (1000:1000) matches the first user created in most WSL distributions, so permissions should work automatically.</p>"},{"location":"troubleshooting/permission_handling/#non-standard-user-ids","title":"Non-Standard User IDs","text":"<p>If your host user has a different UID/GID: 1. Set <code>WANTED_UID</code> and <code>WANTED_GID</code> when creating the environment 2. The container will remap the comfy user on startup 3. Use <code>fix-permissions</code> if needed after remapping</p>"},{"location":"troubleshooting/permission_handling/#shared-model-directories","title":"Shared Model Directories","text":"<p>When multiple users share model directories: 1. Consider using group permissions on the host 2. Or use <code>fix-permissions</code> to standardize ownership 3. The audit log tracks all changes for accountability</p>"},{"location":"troubleshooting/permission_handling/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<ol> <li> <p>Permission denied errors persist:</p> <ul> <li>Check if the files are on a network drive or special filesystem</li> <li>Ensure Docker has proper access to the host directories</li> <li>Try running <code>fix-permissions</code> again</li> </ul> </li> <li> <p>Fix-permissions requires sudo:</p> <ul> <li>The command must run as root to change file ownership</li> <li>This is normal and expected behavior</li> </ul> </li> <li> <p>Checking takes too long:</p> <ul> <li>Set <code>PERMISSION_CHECK_MODE=once</code> after initial setup</li> <li>Or use <code>PERMISSION_CHECK_MODE=never</code> if you manage permissions manually</li> </ul> </li> <li> <p>Need to see what was changed:</p> <ul> <li>Check the audit log at <code>/var/log/comfydock/permission-fixes-*.log</code></li> <li>Download it with: <code>docker cp &lt;container_name&gt;:/var/log/comfydock/permission-fixes-*.log ./</code></li> </ul> </li> </ol>"},{"location":"troubleshooting/slow_model_loading/","title":"Slow Model Loading (Windows Users)","text":"<ul> <li>If you have your model checkpoints currently saved on a windows drive (C:\\, D:\\, etc.), you may notice increased loading times when using the environment manager. This is due to the container running in WSL and needing to transfer data from Windows to Linux during read operations.</li> <li>You can greatly speed up model loading times by creating a ComfyUI installation inside of WSL (you can have the manager perform this automatically for you during environment creation), and then moving or copying models from Windows to the WSL install location.</li> <li>You can navigate to a WSL location from Windows File Explorer by using the prefix path: <code>\\\\wsl.localhost\\&lt;distro name&gt;\\&lt;path&gt;\\&lt;to&gt;\\&lt;directory&gt;</code><ul> <li>e.g. <code>\\\\wsl.localhost\\Ubuntu\\home\\akatz\\ComfyUI\\models</code></li> <li>If you don\u2019t know which distro you have installed, start by pasting <code>\\\\wsl.localhost</code> into your file explorer path bar and navigating using the GUI from there.</li> </ul> </li> </ul>"}]}